#!/bin/make
# optional LPATH defines absolute path where to find pre-installed libraries, e.g., /usr/lib
# optional OPENSSL_DIR defines absolute or relative (to PARENT_DIR) path to OpenSSL installation
# optional LIBCMP_INC defines absolute or relative (to PARENT_DIR) path of the libcmp header files
# optional LIBCMP_OUT defines absolute or relative (to PARENT_DIR) path of libcmp binary

PARENT_DIR=.

ifeq ($(OS),Windows_NT)
    EXE=.exe
    DLL=.dll
    OBJ=.obj
    LIB=bin
else
    EXE=
    DLL=.so
    OBJ=.o
    LIB=lib
endif

ifeq ($(OPENSSL_DIR),)
    OPENSSL_DIR=$(ROOTFS)/usr
endif
ifeq ($(shell echo $(OPENSSL_DIR) | grep "^/"),)
# $(OPENSSL_DIR) is relative path, assumed relative to PARENT_DIR
    OPENSSL=$(PARENT_DIR)/$(OPENSSL_DIR)
    OPENSSL_LIB=$(OPENSSL)
    OPENSSL_RPATH=$(OPENSSL_DIR)
    OPENSSL_RPATH_LIB=$(OPENSSL_DIR)
else
# $(OPENSSL_DIR) is absolute path
    OPENSSL=$(OPENSSL_DIR)
    OPENSSL_LIB=$(OPENSSL)/$(LIB)
    OPENSSL_RPATH=$(OPENSSL)
    OPENSSL_RPATH_LIB=$(OPENSSL_LIB)
endif

ARCHIVE=$(PARENT_DIR)/bin # for Jenkins
LIBSECUTILS=libSecUtils$(DLL)
SECUTILS_DIR_=securityUtilities
SECUTILS_DIR=$(PARENT_DIR)/$(SECUTILS_DIR_)
LIBCMP_INC ?= include_cmp
LIBCMP_OUT ?= .

CC ?= gcc
ifdef NDEBUG
    override CFLAGS += -DNDEBUG=1 -O2
else
    override CFLAGS += -g# # not every compiler(version) supports -Og
endif
override CFLAGS += -std=gnu90 -fstack-protector -fno-omit-frame-pointer -D_FORTIFY_SOURCE=2# # -fsanitize=address
override CFLAGS += -Wall -Woverflow -Wconversion -Wextra -Wunused-parameter $(OSSL_VERSION_QUIRKS) #-DPEDANTIC -pedantic -Wno-declaration-after-statement # -Werror
ifeq ($(LPATH),)
   override CFLAGS += -I$(SECUTILS_DIR)/include -I$(PARENT_DIR)/$(LIBCMP_INC)
endif
override CFLAGS += -I$(PARENT_DIR)/include
override CFLAGS += -isystem $(OPENSSL)/include# # use of -isystem is critical for selecting wanted OpenSSL version

ifdef USE_UTA
    LIBS += -luta
endif
ifdef SEC_NO_TLS
    override CFLAGS += -DSEC_NO_TLS=1
else
    LIBS += -lssl
endif
LIBS += -lcmp -lSecUtils -lcrypto

ifeq ($(LPATH),)
    override LDFLAGS += -L$(PARENT_DIR)/$(LIBCMP_OUT) -Wl,-rpath=$(LIBCMP_OUT)
    override LDFLAGS += -L$(SECUTILS_DIR) -Wl,-rpath=$(SECUTILS_DIR_)
    override LDFLAGS += -L$(OPENSSL_LIB) -L$(OPENSSL) -Wl,-rpath=$(OPENSSL_RPATH_LIB) -Wl,-rpath=$(OPENSSL_RPATH)
else
    override LDFLAGS += -L$(LPATH)
endif


LIBGENCMPCL=$(PARENT_DIR)/libgencmpcl$(DLL)

OBJS = src/genericCMPClient$(OBJ) src/cmpClient$(OBJ)

SRCS = $(OBJS:$(OBJ)=.c)

DEPS = $(SRCS:.c=.d)

OPENSSL_DLLS = *{crypto,ssl}*.dll

EXES = $(PARENT_DIR)/cmpClient$(EXE)

########## rules and targets

.PHONY: build
build:	$(EXES)
ifeq ($(OS),Windows_NT)
ifeq ($(LPATH),)
	@echo "Copying OpenSSL DLLs to base directory for convenient use with Windows"
	@cp --preserve=timestamps $(OPENSSL_LIB)/$(OPENSSL_DLLS) $(PARENT_DIR)
endif
	@echo "Copying SecUtils DLL to base directory for convenient use with Windows"
	@cp --preserve=timestamps $(SECUTILS_DIR)/$(LIBSECUTILS) $(PARENT_DIR) # $(OPENSSL_LIB)/*{crypto,ssl}*.dll
endif

ifeq ($(findstring clean,$(MAKECMDGOALS)),)
-include $(DEPS)
endif

$(OBJS): %$(OBJ): %.c | $(SECUTILS_DIR)/$(LIBSECUTILS) $(PARENT_DIR)/$(LIBCMP_OUT)/libcmp$(DLL)
	 $(CC) $(CFLAGS) -c -fPIC $< -o $@
	@$(CC) $(CFLAGS) -MM $< -MT $@ -MF $*.d

#%$(OBJ): %.c
#	$(CC) $(CFLAGS) -o "$@" "$<"

$(LIBGENCMPCL): src/genericCMPClient$(OBJ)
	$(CC) $^ $(LDFLAGS) $(LIBS) -shared -o $@

$(PARENT_DIR)/cmpClient$(EXE): src/cmpClient$(OBJ) | $(LIBGENCMPCL)
	$(CC) $(LDFLAGS) $< -lgencmpcl $(LIBS) -o $@

.PHONY: all archive
all: build archive

archive:
	@mkdir 2>/dev/null $(ARCHIVEDIR) || true
	@cp --preserve=timestamps $(EXES) $(ARCHIVE)

.PHONY: clean
clean:
	rm -f $(EXES) $(LIBGENCMPCL) $(DEPS) $(OBJS)
ifeq ($(OS),Windows_NT)
ifeq ($(LPATH),)
	rm -f $(PARENT_DIR)/$(OPENSSL_DLLS)
endif
	rm -f $(PARENT_DIR)/$(LIBSECUTILS)
endif
